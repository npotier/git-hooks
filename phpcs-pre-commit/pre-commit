#!/bin/bash
# PHP CodeSniffer pre-commit hook for git
#
# @author Soenke Ruempler <soenke@ruempler.eu>
# @author Sebastian Kaspari <s.kaspari@googlemail.com>
# @author Nicolas Potier <nicolas.potier@acseo-conseil.fr>
#
# see the README

# parse config
CONFIG_FILE=$(dirname $0)/config
if [ -e $CONFIG_FILE ]; then
    . $CONFIG_FILE
fi

# simple check if PHPCS is set up correctly
if [ $ENABLE_PHPCS -ne 0 -a ! -x $PHPCS_BIN ]; then
    echo "PHP CodeSniffer bin not found or executable -> $PHPCS_BIN"
    exit 1
fi

# simple check if PHPMD is set up correctly
if [ $ENABLE_PHPMD -ne 1 -a ! -x $PHPMD_BIN ]; then
    echo "PHP Mess Detector bin not found or executable -> $PHPCS_BIN"
    exit 1
fi

# stolen from template file
if git rev-parse --verify HEAD
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# this is the magic: 
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
    exit 0
fi

# create temporary copy of staging area
if [ -e $TMP_STAGING ]; then
    rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING

# match files against whitelist
FILES_TO_CHECK=""
for FILE in $FILES
do
    echo "$FILE" | egrep -q "$PHPCS_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

if [ "$FILES_TO_CHECK" == "" ]; then
    exit 0
fi

# execute the code sniffer
if [ "$PHPCS_IGNORE" != "" ]; then
    IGNORE="--ignore=$PHPCS_IGNORE"
else
    IGNORE=""
fi

if [ "$PHPCS_ENCODING" != "" ]; then
    ENCODING="--encoding=$PHPCS_ENCODING"
else
    ENCODING=""
fi

if [ "$PHPCS_IGNORE_WARNINGS" == "1" ]; then
    IGNORE_WARNINGS="-n"
else
    IGNORE_WARNINGS=""
fi

# Copy contents of staged version of files to temporary staging area
# because we only want the staged version that will be commited and not
# the version in the working directory
STAGED_FILES=""
for FILE in $FILES_TO_CHECK
do
  ID=$(git diff-index --cached HEAD $FILE | cut -d " " -f4)

  # create staged version of file in temporary staging area with the same
  # path as the original file so that the phpcs ignore filters can be applied
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"
  STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
done

RETVAL_PHPCS=0
if [ $ENABLE_PHPCS -ne 0 ]; then
    OUTPUT_PHPCS=$($PHPCS_BIN -s $IGNORE_WARNINGS  --standard=$PHPCS_CODING_STANDARD $ENCODING $IGNORE $STAGED_FILES)
    RETVAL_PHPCS=$?
fi

RETVAL_PHPMD=0
if [ $ENABLE_PHPMD -ne 0 ]; then
    #execute PHPMD
    OUTPUT_PHPMD=$(phpmd $TMP_STAGING text codesize,unusedcode,naming)
    RETVAL_PHPMD=$?
fi
# delete temporary copy of staging area
rm -rf $TMP_STAGING

if [ -e $PRECOMMIT_LOG ]; then
    rm  $PRECOMMIT_LOG
fi

if [ $RETVAL_PHPCS -ne 0 ]; then
    echo "$OUTPUT_PHPCS" 

    if [ $PRECOMMIT_LOG -ne 0 ]; then
        echo "$OUTPUT_PHPCS" >> $PRECOMMIT_LOG_FILE
        echo "PHP Code Sniffer errors have been detected... Report has been written in $PRECOMMIT_LOG_FILE file"
    fi
fi
if [ $RETVAL_PHPMD -ne 0 ]; then
    echo "$OUTPUT_PHPMD"
    if [ $PRECOMMIT_LOG -ne 0 ]; then
        echo "$OUTPUT_PHPMD" >> $PRECOMMIT_LOG_FILE
        echo "PHP Mess Detector errors have been detected... Report has been written in $PRECOMMIT_LOG_FILE file"
    fi    
fi
if [ $BLOCK_ON_ERRORS -ne 0 ]; then
    RETURN_CODE=`expr $RETVAL_PHPCS+$RETVAL_PHPMD`
    echo "The hook has been configured to block on error. returning status code $RETURN_CODE"
    exit $RETURN_CODE
fi
exit 0
